class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        Arrays.sort(nums);
        boolean[] visited = new boolean[nums.length];
        bcktrck(nums, ans, temp, 0, visited);
        return ans;
    }

    public void bcktrck(int[] nums, List<List<Integer>> ans, List<Integer> temp, int start, boolean[] visited) {
        if (start == nums.length) {
            ans.add(new ArrayList<>(temp));
        } else {
            for (int i = 0; i < nums.length; i++) {
                if (visited[i] || i > 0 && nums[i] == nums[i - 1] && !visited[i - 1])
                    continue;
                visited[i] = true;
                temp.add(nums[i]);
                bcktrck(nums, ans, temp, start + 1, visited);
                visited[i] = false;
                temp.remove(temp.size() - 1);

            }
        }

    }
}
