class Solution {
public:
int dp[51][51][51];
    long long mod=1e9+7;
    
    int ans(int i,int j,int m,int n,int moves){
        if(i<0 || i>=m || j<0 || j>=n)
            return 1;
        if(moves<=0)
            return 0;
        if(dp[i][j][moves]!=-1)
            return dp[i][j][moves];
        int up=ans(i-1,j,m,n,moves-1);
        int down=ans(i+1,j,m,n,moves-1);
        int left=ans(i,j-1,m,n,moves-1);
        int right=ans(i,j+1,m,n,moves-1);

        return dp[i][j][moves]=(up%mod + down%mod + left%mod + right%mod)%mod;
    }
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
               
        memset(dp,-1,sizeof(dp));
        return ans(startRow,startColumn,m,n,maxMove);
    }
};
