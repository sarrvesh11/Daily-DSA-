class Solution {
    public boolean canFinish(int n, int[][] pre) {
        boolean visited[]=new boolean[n];
        boolean helper[]=new boolean[n];
        ArrayList<ArrayList<Integer>>al=new ArrayList<>();

        for(int i=0;i<n;i++){
            al.add(new ArrayList());
        }
        for(int[] it:pre){
            al.get(it[1]).add(it[0]);
        }
        for(int i=0;i<n;i++){
            if(visited[i]==false){
                boolean ans=dfs(al,i,visited,helper);
                if(ans)
                    return false;
            }
        }
        return true;
    }
    public static boolean dfs(ArrayList<ArrayList<Integer>>al,int i,boolean visited[],  boolean helper[] ){
        visited[i]=true;
        helper[i]=true;
        ArrayList<Integer>neighbour=al.get(i);
        for(int j=0;j<neighbour.size();j++){
            int curr=neighbour.get(j);
            if(helper[curr]==true)
                return true;
            if(visited[curr]==false){
                boolean ans = dfs(al,curr,visited,helper);
                if(ans == true) return true;
            }
        }
        helper[i]=false;
        return false;
    }
}
