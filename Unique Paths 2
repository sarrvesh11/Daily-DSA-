class Solution {
public:
    int help(vector<vector<int>>& obstacleGrid,int n,int m){
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                if(i==0 && j==0){
                    dp[i][j]=1;
                }
               else if(obstacleGrid[i][j]==1)
                    continue;
                else{
                    int up=0,down=0;
                    if(i>0)
                        up=dp[i-1][j];
                    if(j>0)
                        down=dp[i][j-1];
                    dp[i][j]=up+down;
                }
            }
        }
        return dp[n][m];
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size()-1;
        int n=obstacleGrid[0].size()-1;
        if(obstacleGrid[0][0]==1 || obstacleGrid[m][n]==1 )
            return 0;
        return help(obstacleGrid,m,n);
    }
};
