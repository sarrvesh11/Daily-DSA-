/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        int count=0;
        int sum=0;
        vector<pair<int,int>>nodes;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            int n=q.size();
            count++;
            for(int i=0;i<n;i++){
                auto temp=q.front();
                q.pop();
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);
                if(temp->left==NULL && temp->right==NULL){
                    nodes.push_back({count,temp->val});
                }
            }
        }
        int maxi=0;
        for(auto i:nodes){
            maxi=i.first;
        }
        for(auto it:nodes){
            if(it.first==maxi)
                sum+=it.second;
        }

    return sum;
    }
};
